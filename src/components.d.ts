/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface WebButton {
        "disableBtn": boolean;
        "labelBtn": string;
        "typeBtn": 'primary-default' | 'secondary-default' | 'tertiary-default';
    }
}
export interface WebButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLWebButtonElement;
}
declare global {
    interface HTMLWebButtonElementEventMap {
        "emitClick": void;
    }
    interface HTMLWebButtonElement extends Components.WebButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLWebButtonElementEventMap>(type: K, listener: (this: HTMLWebButtonElement, ev: WebButtonCustomEvent<HTMLWebButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLWebButtonElementEventMap>(type: K, listener: (this: HTMLWebButtonElement, ev: WebButtonCustomEvent<HTMLWebButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLWebButtonElement: {
        prototype: HTMLWebButtonElement;
        new (): HTMLWebButtonElement;
    };
    interface HTMLElementTagNameMap {
        "web-button": HTMLWebButtonElement;
    }
}
declare namespace LocalJSX {
    interface WebButton {
        "disableBtn"?: boolean;
        "labelBtn"?: string;
        "onEmitClick"?: (event: WebButtonCustomEvent<void>) => void;
        "typeBtn"?: 'primary-default' | 'secondary-default' | 'tertiary-default';
    }
    interface IntrinsicElements {
        "web-button": WebButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "web-button": LocalJSX.WebButton & JSXBase.HTMLAttributes<HTMLWebButtonElement>;
        }
    }
}
